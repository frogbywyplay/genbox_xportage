#!/usr/bin/python
#
# Copyright (C) 2006-2016 Wyplay, All Rights Reserved.
#

from _emerge.main import parse_opts
from portage import config
from portage.output import colorize
from portage.versions import vercmp
from profilechecker.checker import ProfileChecker
from profilechecker.package import Package, Packages, PackagesFile, PackageMaskFile, PackageUnmaskFile
from subprocess import Popen
from xportage import xexec
from xtarget.current import get_current_target
import sys, os

def check_profile(params):
    target = get_current_target()
    if target is None:
        print colorize('red', '* Unable to find current target.')
        sys.exit(1)

    myroot = '%s/root' % target
    cfg = config(config_root=unicode(myroot), target_root=unicode(myroot))
    for directory in cfg.profiles:
        mask_pkgs = Packages()
        unmask_pkgs = Packages()
        pf = PackagesFile(directory)
        for package in pf.list_pkgs().list():
            if package.version:
                if package.operator == '=' and not package.removal:
                    mask_pkgs += Package(package.name, version=package.version, operator='>')
                if package.operator == '=' and package.removal:
                    highest_version = str()
                    for pkg in pf.list_pkgs().lookup(package.name):
                        highest_version = package.version if vercmp(package.version, pkg.version) >= 0 else pkg.version
                    if package.version != highest_version:
                        unmask_pkgs += Package(package.name, version=highest_version, operator='<=')

        pm = PackageMaskFile(directory)
        pm.update(mask_pkgs)
        pu = PackageUnmaskFile(directory)
        pu.update(unmask_pkgs)

    action, option, pkg_list = parse_opts(params[1:])
    if action is None:
        try:
            option['--pretend']
        except KeyError:
            p = ProfileChecker(myroot)
            p.parse()
            for pkg in pkg_list:
                print colorize('darkgreen', 'Check profile for %s.' % pkg)
                (has_warnings, has_errors) = p.check_installed_versions(pkg, False)
                if has_errors:
                    print colorize('red', '* Fix your ebuild and retry.')
                    sys.exit(1)

def unmask(package):
    unmask_file = get_current_target() + '/root/etc/portage/package.unmask'
    if os.path.exists(unmask_file) and os.path.isdir(unmask_file):
        unmask_file += '/target'
    f = open(unmask_file, 'w')
    f.write(package + '\n')
    f.close()

if __name__ == "__main__":
    if not os.geteuid() == 0:
        print colorize('red', '* %s must be run with root credentials.' % sys.argv[0])
        sys.exit(1)
    if get_current_target() is None:
        print colorize('red', '* No target found. Install a target using xtarget before running %s.' % sys.argv[0])
        sys.exit(1)
    sys.argv[0] = r'/usr/bin/emerge'
    unmask(package=str())
    env = os.environ.copy()
    ignore_version = False

    if 'nopackages' in os.getenv('FEATURES', ''):
        env['FEATURES'] = os.getenv('FEATURES').replace('nopackages', '').strip()
        ignore_version = True

    if len(sys.argv) > 1:
        debug = False
        poped = 0
        for arg_num, arg in enumerate(sys.argv[1:-1]):
            if arg in [ '--debug', '-d' ]:
                sys.argv.pop(arg_num + 1 - poped)
                poped += 1
                debug = True
                continue
            elif arg in ['--ignore-profile-version', '-I']:
                sys.argv.pop(arg_num + 1 - poped)
                poped += 1
                ignore_version = True
                continue
            elif (len(arg) > 2) and (arg[0] == '-') and (arg[1] != '-'):
                i = arg.find('d')
                if i > 0:
                    sys.argv[arg_num + 1 - poped] = arg[:i] + arg[i + 1:]
                    debug = True
                i = arg.find('I')
                if i > 0:
                    sys.argv[arg_num + 1 - poped] = arg[:i] + arg[i + 1:]
                    ignore_version = True
        if debug:
            env['FEATURES'] = os.getenv('FEATURES', '') + ' splitdebug'
            env['CFLAGS_USER'] = os.getenv('CFLAGS_USER', '') + ' -g -ggdb -funwind-tables'
            env['CXXFLAGS_USER'] = os.getenv('CXXFLAGS_USER', '') + ' -g -ggdb -funwind-tables'
            env['CFLAGS_USER_POST'] = os.getenv('CFLAGS_USER_POST', '-O0')
            env['CXXFLAGS_USER_POST'] = os.getenv('CXXFLAGS_USER_POST', '-O0')
            env['LDFLAGS_USER'] = os.getenv('LDFLAGS_USER', '') + ' -rdynamic'

    current_target = get_current_target()
    env['PORTAGE_CONFIGROOT'] = current_target + "/root/"
    env['ROOT'] = current_target + "/root/"

    if ignore_version:
        unmask(package='*/*')
    else:
        check_profile(sys.argv)

    process = Popen(sys.argv, env=env)
    (stdout, stderr) = process.communicate()

    unmask(package=str())

    sys.exit(process.returncode)
